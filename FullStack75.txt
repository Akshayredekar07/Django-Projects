
CSRF: Cross site request forgery

hidden filed in the form:

<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Django froms</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <h1>Student Input form</h1>
    <div class="container" align="center">

        <form action="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" name="" class="btn btn-lg btn-primary " value="Submit marks">
        </form>
    </div>
</body>
</html>     

~~~~~~~~~~~~~~~~
{% csrf_token %}  : for the interna security purpose


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
how to generate django form 

froms.py -----> views.py -----------> templates files

what is the need of csrf token:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
csrf_token is mandatory 

csrfmiddlewaretoken=y5fD1nD5TykCq7xD3rFvMriCeFbXP9fURffXBgrJReyKuPwgXEDQzIcDbWT6ojSd

If we add csrf_token in the generated form the following hidden token filed will added, which makes our post request secure.

~~~~~~~~~~~~~~~~~~~~``

The value of this hidden field is keep changing fro  request ot request. Hence it is impossible to forgery our request

If we configure csrf_token then only django accepts our form 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
how to process input data from the from inside views.py

>> inside views.py , we have to read data provided by the end user and we have to use that data based on the our requirements


form=StudentForm()-->empty form object to display form data to the end user 

form=StudentForm(request.POST) -->this form object contains end user provided data

cleaned_data ---> dictinory which contains end user provided data
form.cleaned_data['name'] -->the name enterd by the end user
form.cleaned_data['marks'] -->the marks enterd by the end user


form.is_valid() --->to check wheather validations are successful or not 


def student_input_view(request):

    submitted=False    

    if request.method == 'POST':
        form=Studentform(request.POST)
        if form.is_valid():
            print('Form Validation Success and printing data')
            print('Name: ',form.cleaned_data['name'])
            print('Marks: ',form.cleaned_data['marks'])
            print('Age: ',form.cleaned_data['age'])
            submitted=True

    form = Studentform()

    return render(request, 'testapp/input.html', {'form': form,'submitted:': submitted})

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    send data through post or get::


    get request:: frist time 

        <div class="container" align="center">

        {% if submitted %}
        <h1>Thanks for providing infromation</h1>
        <h2>Enter next student marks</h2>

        {% else %}
        <h1>Student Input form</h1>
        {% endif %}
        <form action="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" name="" class="btn btn-lg btn-primary " value="Submit marks">
        </form>
    </div>


    ~~~~~~~~~~~~~~~~~
    def student_input_view(request):

    submitted=False    

    if request.method == 'POST':
        form=Studentform(request.POST)
        if form.is_valid():
            print('Form Validation Success and printing data')
            print('Name: ',form.cleaned_data['name'])
            print('Marks: ',form.cleaned_data['marks'])
            print('Age: ',form.cleaned_data['age'])
            submitted=True

    form = Studentform()

    return render(request, 'testapp/input.html', {'form': form,'submitted:': submitted})

    ~~~~~~~~~~~~~~~~~~~~~```

    feedback project:

    name 
    rollno
    email 
    feedback


    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``

    django-admin startproject FeedbackProject

    python manage.py startapp testapp

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``

    75:::

    from validations:

    Very commmon requirement to implement the form validations

    1. feedback minimum length shoud be 200 characters
    2. Password must contains minimum 8 characters 
    3. user email should be only gmail

    we can implement validadation logic by using the 2 ways 

    1. Explicitly by the programmer by using the clean method 
    2. 
    by usng the django inbuilt validators 

    **Total validation logic shoud be written in forms.py file 
    ****

    ~~~~~~~~~~~~~~~~~~~~~~Basic OOP logic:

    class Parent:
    def __init__(self) -> None:
        self.x=9999

    def property(self):
        print('gold+land+cash')


class Child(Parent):
    def education(self):
        print("B.tech qualifacation")


c=Child()
c.education()
c.property()
print(c.x)        

~~~~~~~~~~~~~~~~~~~~

class Parent:
    def marry(self):
        print('Marrray appalama')

class Child(Parent):
    def marry(self):
        print("marry katrina kaif")
        super().marry()


:: method overriding concept


syntax of clean method:
~~~~~~~~~~~~~~~~~~~~~~~
clean_filedname(self):

In the form class for any filed, if we define clean method, then at the time of the submit this form django will call this method automatically to perform vaidations. If the clean method wont raise any error then only request will be processed.

e.g: the number of characters in the name field should be atlest 4.

_________________________________________________________________
??? Django automatically calls the clean method whitle accepting the input  in form:


from django import forms

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

    def clean_name(self):
        print('Validating name field')
        inputname=self.cleaned_data['name']
        if len(inputname)<4:
            raise forms.ValidationError('The minimum number of characters in the name filed should be 4')
        return inputname
        
    def clean_rollno(self):
        print('Validating rollno field')
        inputrollno=self.cleaned_data['rollno']
        return inputrollno
        
    def clean_email(self):
        print('Validating email field')
        inputemail=self.cleaned_data['email']
        return inputemail
        
    def clean_feedback(self):
        print('Validating feedback field')
        inputfeedback=self.cleaned_data['email']
        return inputfeedback
        


        ~~~~~~~~~~~~``````~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


        this is explicit form validation by the programmer 

Note:  Django will call this field level clean methods automatically and we are not require to call these methods Explicitly        


2. By using the django inbuit validations: