
CSRF: Cross site request forgery

hidden filed in the form:

<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Django froms</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <h1>Student Input form</h1>
    <div class="container" align="center">

        <form action="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" name="" class="btn btn-lg btn-primary " value="Submit marks">
        </form>
    </div>
</body>
</html>     

~~~~~~~~~~~~~~~~
{% csrf_token %}  : for the interna security purpose


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
how to generate django form 

froms.py -----> views.py -----------> templates files

what is the need of csrf token:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
csrf_token is mandatory 

csrfmiddlewaretoken=y5fD1nD5TykCq7xD3rFvMriCeFbXP9fURffXBgrJReyKuPwgXEDQzIcDbWT6ojSd

If we add csrf_token in the generated form the following hidden token filed will added, which makes our post request secure.

~~~~~~~~~~~~~~~~~~~~``

The value of this hidden field is keep changing fro  request ot request. Hence it is impossible to forgery our request

If we configure csrf_token then only django accepts our form 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
how to process input data from the from inside views.py

>> inside views.py , we have to read data provided by the end user and we have to use that data based on the our requirements


form=StudentForm()-->empty form object to display form data to the end user 

form=StudentForm(request.POST) -->this form object contains end user provided data

cleaned_data ---> dictinory which contains end user provided data
form.cleaned_data['name'] -->the name enterd by the end user
form.cleaned_data['marks'] -->the marks enterd by the end user


form.is_valid() --->to check wheather validations are successful or not 


def student_input_view(request):

    submitted=False    

    if request.method == 'POST':
        form=Studentform(request.POST)
        if form.is_valid():
            print('Form Validation Success and printing data')
            print('Name: ',form.cleaned_data['name'])
            print('Marks: ',form.cleaned_data['marks'])
            print('Age: ',form.cleaned_data['age'])
            submitted=True

    form = Studentform()

    return render(request, 'testapp/input.html', {'form': form,'submitted:': submitted})

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    send data through post or get::


    get request:: frist time 

        <div class="container" align="center">

        {% if submitted %}
        <h1>Thanks for providing infromation</h1>
        <h2>Enter next student marks</h2>

        {% else %}
        <h1>Student Input form</h1>
        {% endif %}
        <form action="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" name="" class="btn btn-lg btn-primary " value="Submit marks">
        </form>
    </div>


    ~~~~~~~~~~~~~~~~~
    def student_input_view(request):

    submitted=False    

    if request.method == 'POST':
        form=Studentform(request.POST)
        if form.is_valid():
            print('Form Validation Success and printing data')
            print('Name: ',form.cleaned_data['name'])
            print('Marks: ',form.cleaned_data['marks'])
            print('Age: ',form.cleaned_data['age'])
            submitted=True

    form = Studentform()

    return render(request, 'testapp/input.html', {'form': form,'submitted:': submitted})

    ~~~~~~~~~~~~~~~~~~~~~```

    feedback project:

    name 
    rollno
    email 
    feedback


    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``

    django-admin startproject FeedbackProject

    python manage.py startapp testapp